/// A signed integer value.
public type Int {

  var value: Builtin.i64

  /// Returns the sum of `self` and `other`.
  ///
  /// - Requires: The sum of the two arguments must be representable in the arguments' type.
  public infix fun + (_ other: Self) -> Self {
    Int(value: Builtin.i64_add(value, other.value))
  }

  /// Returns `self` subtracted by `other`.
  public infix fun - (_ other: Self) -> Self {
    Int(value: Builtin.i64_sub(value, other.value))
  }

  /// Returns the product of `self` and `other`
  public infix fun * (_ other: Self) -> Self {
    Int(value: Builtin.i64_mul(value, other.value))
  }

  /// Returns `true` if `self` is smaller than `other`. Otherwise, returns `false`.
  public infix fun < (_ other: Self) -> Bool {
    Bool(value: Builtin.i64_lt(value, other.value))
  }

}

public conformance Int: ExpressibleByIntegerLiteral {}

public conformance Int: Sinkable {

  public fun take_value(from source: sink Self) -> Self {
    set   { value = source.value }
    inout { value = source.value }
  }

}

public conformance Int: Copyable {

  public fun copy() -> Self {
    Int(value: Builtin.i64_copy(value))
  }

}
